#使用logloss作为训练目标函数
df = data.frame(y=y,x1=x1,x2=x2)
glm.fit=glm( y~x1+x2,data=df,family="binomial")
#下面使用auc作为训练目标函数
library(ROCR)
CalAUC <- function(real,pred){
rocr.pred=prediction(pred,real)
rocr.perf=performance(rocr.pred,'auc')
rocr.perf@y.values
}
#初始值
beta0=c(1,1,1)
loss <- function(beta){
z=beta[1]+beta[2]*x1+beta[3]*x2
pred=1/(1+exp(-z))
-CalAUC(y,pred)
}
res=optim(beta0,loss,method = "Nelder-Mead",control = list(maxit = 100))
library(ROCR)
#生成训练数据
set.seed(1999)
x1 = rnorm(1000)
x2 = rnorm(1000)
z = 1 + 2*x1 + 3*x2
pr = 1/(1+exp(-z))
y = rbinom(1000,1,pr)
#使用logloss作为训练目标函数
df = data.frame(y=y,x1=x1,x2=x2)
glm.fit=glm( y~x1+x2,data=df,family="binomial")
#下面使用auc作为训练目标函数
CalAUC <- function(real,pred){
rocr.pred=prediction(pred,real)
rocr.perf=performance(rocr.pred,'auc')
as.numeric(rocr.perf@y.values)
}
#初始值
beta0=c(1,1,1)
loss <- function(beta){
z=beta[1]+beta[2]*x1+beta[3]*x2
pred=1/(1+exp(-z))
-CalAUC(y,pred)
}
res=optim(beta0,loss,method = "Nelder-Mead",control = list(maxit = 100))
cat("直接用AUC训练:",-res$value)
cat("使用glm函数",CalAUC(y,glm.fit$fitted.values))
library(ROCR)
p=c(0.5,0.6,0.55,0.4,0.7)
y=c(1,1,0,0,1)
pred = prediction(p, y)
perf = performance(pred,"tpr","fpr")
plot(perf,col="blue",lty=3, lwd=3,cex.lab=1.5, cex.axis=2, cex.main=1.5,main="ROC plot")
auc = performance(pred,"auc")
#auc = unlist(slot(auc, "y.values"))
cat("直接用AUC训练:",auc)
library(ROCR)
p=c(0.5,0.6,0.55,0.4,0.7)
y=c(1,1,0,0,1)
pred = prediction(p, y)
perf = performance(pred,"tpr","fpr")
plot(perf,col="blue",lty=3, lwd=3,cex.lab=1.5, cex.axis=2, cex.main=1.5,main="ROC plot")
auc = performance(pred,"auc")
auc = unlist(slot(auc, "y.values"))
cat("直接用AUC训练:",auc)
library(ROCR)
p=c(0.5,0.6,0.55,0.4,0.7)
y=c(1,1,0,0,1)
pred = prediction(p, y)
perf = performance(pred,"tpr","fpr")
plot(perf,col="blue",lty=3, lwd=3,cex.lab=1.5, cex.axis=2, cex.main=1.5,main="ROC plot")
auc = performance(pred,"auc")
#auc = unlist(slot(auc, "y.values"))
#cat("直接用AUC训练:",auc)
auc.y.values
auc$y.values
perf
type(pref)
set.seed(1999)
x1 = rnorm(1000)
x2 = rnorm(1000)
z = 1 + 2*x1 + 3*x2
pr = 1/(1+exp(-z))
y = rbinom(1000,1,pr)
#生成训练数据
set.seed(1999)
x1 = rnorm(1000)
x2 = rnorm(1000)
pr = 1/(1+exp(-z))
#生成训练数据
set.seed(1999)
x1 = rnorm(1000)
x2 = rnorm(1000)
z = 1 + 2*x1 + 3*x2
pr = 1/(1+exp(-z))
y = rbinom(1000,1,pr)
#使用logloss作为训练目标函数
df = data.frame(y=y,x1=x1,x2=x2)
glm.fit=glm( y~x1+x2,data=df,family="binomial")
#下面使用auc作为训练目标函数
library(ROCR)
CalAUC <- function(real,pred){
rocr.pred=prediction(pred,real)
rocr.perf=performance(rocr.pred,'auc')
as.numeric(rocr.perf@y.values)
}
beta0=c(1,1,1)
loss <- function(beta){
z=beta[1]+beta[2]*x1+beta[3]*x2
pred=1/(1+exp(-z))
-CalAUC(y,pred)
}
res=optim(beta0,loss,method = "Nelder-Mead",control = list(maxit = 100))
cat("直接用AUC训练:",-res$value)
cat("使用glm函数",CalAUC(y,glm.fit$fitted.values))
install.packages(c("BH", "bindr", "bindrcpp", "broom", "callr", "caret", "caTools", "CVST", "data.table", "dbplyr", "ddalpha", "devtools", "digest", "dotCall64", "dplyr", "evaluate", "Formula", "geosphere", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "ipred", "iterators", "kernlab", "lava", "lazyeval", "maptools", "ModelMetrics", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "plogr", "psych", "purrr", "Rcpp", "RcppRoll", "RCurl", "recipes", "reprex", "reshape2", "RgoogleMaps", "rjson", "rlang", "rmarkdown", "robustbase", "scales", "showtext", "showtextdb", "sp", "spam", "stringi", "stringr", "sysfonts", "tidyr", "utf8", "XML", "xts", "yaml", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "broom", "callr", "caret", "caTools", "CVST", "data.table", "dbplyr", "ddalpha", "devtools", "digest", "dotCall64", "dplyr", "evaluate", "Formula", "geosphere", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "ipred", "iterators", "kernlab", "lava", "lazyeval", "maptools", "ModelMetrics", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "plogr", "psych", "purrr", "Rcpp", "RcppRoll", "RCurl", "recipes", "reprex", "reshape2", "RgoogleMaps", "rjson", "rlang", "rmarkdown", "robustbase", "scales", "showtext", "showtextdb", "sp", "spam", "stringi", "stringr", "sysfonts", "tidyr", "utf8", "XML", "xts", "yaml", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "broom", "callr", "caret", "caTools", "CVST", "data.table", "dbplyr", "ddalpha", "devtools", "digest", "dotCall64", "dplyr", "evaluate", "Formula", "geosphere", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "ipred", "iterators", "kernlab", "lava", "lazyeval", "maptools", "ModelMetrics", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "plogr", "psych", "purrr", "Rcpp", "RcppRoll", "RCurl", "recipes", "reprex", "reshape2", "RgoogleMaps", "rjson", "rlang", "rmarkdown", "robustbase", "scales", "showtext", "showtextdb", "sp", "spam", "stringi", "stringr", "sysfonts", "tidyr", "utf8", "XML", "xts", "yaml", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "broom", "callr", "caret", "caTools", "CVST", "data.table", "dbplyr", "ddalpha", "devtools", "digest", "dotCall64", "dplyr", "evaluate", "Formula", "geosphere", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "ipred", "iterators", "kernlab", "lava", "lazyeval", "maptools", "ModelMetrics", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "plogr", "psych", "purrr", "Rcpp", "RcppRoll", "RCurl", "recipes", "reprex", "reshape2", "RgoogleMaps", "rjson", "rlang", "rmarkdown", "robustbase", "scales", "showtext", "showtextdb", "sp", "spam", "stringi", "stringr", "sysfonts", "tidyr", "utf8", "XML", "xts", "yaml", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "broom", "callr", "caret", "caTools", "CVST", "data.table", "dbplyr", "ddalpha", "devtools", "digest", "dotCall64", "dplyr", "evaluate", "Formula", "geosphere", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "ipred", "iterators", "kernlab", "lava", "lazyeval", "maptools", "ModelMetrics", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "plogr", "psych", "purrr", "Rcpp", "RcppRoll", "RCurl", "recipes", "reprex", "reshape2", "RgoogleMaps", "rjson", "rlang", "rmarkdown", "robustbase", "scales", "showtext", "showtextdb", "sp", "spam", "stringi", "stringr", "sysfonts", "tidyr", "utf8", "XML", "xts", "yaml", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "broom", "callr", "caret", "caTools", "CVST", "data.table", "dbplyr", "ddalpha", "devtools", "digest", "dotCall64", "dplyr", "evaluate", "Formula", "geosphere", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "ipred", "iterators", "kernlab", "lava", "lazyeval", "maptools", "ModelMetrics", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "plogr", "psych", "purrr", "Rcpp", "RcppRoll", "RCurl", "recipes", "reprex", "reshape2", "RgoogleMaps", "rjson", "rlang", "rmarkdown", "robustbase", "scales", "showtext", "showtextdb", "sp", "spam", "stringi", "stringr", "sysfonts", "tidyr", "utf8", "XML", "xts", "yaml", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "broom", "callr", "caret", "caTools", "CVST", "data.table", "dbplyr", "ddalpha", "devtools", "digest", "dotCall64", "dplyr", "evaluate", "Formula", "geosphere", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "ipred", "iterators", "kernlab", "lava", "lazyeval", "maptools", "ModelMetrics", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "plogr", "psych", "purrr", "Rcpp", "RcppRoll", "RCurl", "recipes", "reprex", "reshape2", "RgoogleMaps", "rjson", "rlang", "rmarkdown", "robustbase", "scales", "showtext", "showtextdb", "sp", "spam", "stringi", "stringr", "sysfonts", "tidyr", "utf8", "XML", "xts", "yaml", "zoo"))
install.packages("installr")
library(installr)
updateR()
updateR()
library(ROCR)
library(tidyverse)
update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("stringr")
im.bayes1 <- denoise.bayes1(im.noise, wf='la20')
im.bayes1 <- denoise.bayes1(im.noise, wf='la20')
library(ImageMetrics)
library(waveslim)
im <- readPNG('test.png')
im <- im*255
n <- NROW(im)
sd <- 25
im.noise <- im + matrix(rnorm(n*n, sd=sd), n, n)
im.bayes1 <- denoise.bayes1(im.noise, wf='la20')
im.bayes2 <- denoise.bayes2(im.noise, wf='la20', rule="soft")
im.hard <- denoise.dwt.2d(im.noise, wf="la20")
im.soft <- denoise.dwt.2d(im.noise, wf="la20", rule="soft")
im.garrote <- denoise.garrote(im.noise, wf="la20",thresh=sqrt(3)*sd)
plot(imagematrix(im.noise/255))
plot(imagematrix(im.hard/255))
plot(imagematrix(im.soft/255))
plot(imagematrix(im.bayes1/255))
plot(imagematrix(im.bayes2/255))
plot(imagematrix(im.garrote/255))
var(c(abs(im.noise-im)))
var(c(abs(im.hard-im)))
var(c(abs(im.soft-im)))
var(c(abs(im.bayes1-im)))
var(c(abs(im.bayes2-im)))
var(c(abs(im.garrote-im)))
i <- matrix(rnorm(1024*1024, sd=7), 1024, 1024)
sum(var(abs(i)))
mad(i)
install.packages("ImageMetrics")
setwd("~/Codes/R/R_Learning")
plot(cars)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
#散点图
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, colour = clarity)) +
geom_bar(fill = NA, position = "identity")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, colour = clarity)) +
geom_bar(fill = NA, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
flights
filter(flights, month == 1, day == 1)
filter(flights, month == 12, day == 25)
filter(flights, month == 11 | month == 12)
nov_dec <- filter(flights, month %in% c(11, 12))
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay <= 120, dep_delay <= 120)
select(flights, year, month, day)
filter(flights, month == 1, day == 1)
filter(flights, month == 12, day == 25)
filter(flights, month == 11 | month == 12)
nov_dec <- filter(flights, month %in% c(11, 12))
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay <= 120, dep_delay <= 120)
select(flights, year, month, day)
select(flights, year:day)
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
transmute(flights,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
by_dest <- group_by(flights, dest)
delay <- summarise(by_dest,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
)
delay <- filter(delay, count > 20, dest != "HNL")
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
# count = n()为横轴频次
by_dest <- group_by(flights, dest)
delay <- summarise(by_dest,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
)
delay <- filter(delay, count > 20, dest != "HNL")
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
# 等同%>%
delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
#取出非NA
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
#频次count
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
batting <- as_tibble(Lahman::Batting)
install.packages("Lahman")
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
# count = n()为横轴频次
by_dest <- group_by(flights, dest)
delay <- summarise(by_dest,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
)
delay <- filter(delay, count > 20, dest != "HNL")
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
# 等同%>%
delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
#取出非NA
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
#频次count
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
not_cancelled %>%
count(dest)
count(not_cancelled,dest)
daily <- group_by(flights, year, month, day)
per_day   <- summarise(daily, flights = n())
per_day
n()
daily
flights_sml %>%
group_by(year, month, day) %>%
filter(rank(desc(arr_delay)) < 10)
flights_sml %>%
group_by(year, month, day) %>%
filter(rank(desc(arr_delay)) < 2)
flights_sml
#dest数量大于365
flights %>%
group_by(dest) %>%
filter(n() > 365)
#dest数量大于365
popular_dests <- flights %>%
group_by(dest) %>%
filter(n() > 365)
popular_dests %>%
filter(arr_delay > 0) %>%
mutate(prop_delay = arr_delay / sum(arr_delay)) %>%
select(year:day, dest, arr_delay, prop_delay)
